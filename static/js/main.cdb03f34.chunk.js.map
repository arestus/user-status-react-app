{"version":3,"sources":["components/SortedCities/SortedCities.js","components/FormMain/FormMain.js","utils/DateForUpdate/DateOfLastUpdate.js","App.js","index.js"],"names":["biggestCity","cities","sort","a","b","population","splice","withoutBiggestCity","filter","city","byAlphabet","FormMain","useState","status","setStatus","value","setValue","inputText","setInputText","lastTimeUpdate","setLastTimeUpdate","useForm","register","handleSubmit","errors","formState","watch","password","useRef","current","className","href","onClick","onSubmit","e","preventDefault","type","onChange","target","data","console","table","currentDate","Date","getCurrentDay","getDate","getCurrentMonth","getMonth","getCurrentYear","getFullYear","getCurrentHours","getHours","getCurrentMinutes","getMinutes","getCurrentSeconds","getSeconds","DateOfLastUpdate","name","required","map","i","style","border","minLength","message","maxLength","passwordRepeat","validate","email","pattern","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cdb03f34.chunk.js","sourcesContent":["import cities from '../../cities.json';\r\n\r\nconst biggestCity = [...cities]\r\n  .sort((a, b) => b.population - a.population)\r\n  .splice(0, 1);\r\n\r\nconst withoutBiggestCity = [...cities]\r\n  .sort((a, b) => a.population - b.population)\r\n  .splice(0, 22)\r\n  .filter(city => city.population > 50000)\r\n  .sort(function (a, b) {\r\n    if (a.city < b.city) {\r\n      return -1;\r\n    }\r\n    if (a.city > b.city) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\nconst byAlphabet = [...biggestCity, ...withoutBiggestCity];\r\n\r\nexport default byAlphabet;\r\n","import { useState, useRef } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport DateOfLastUpdate from '../../utils/DateForUpdate';\r\nimport byAlphabet from '../SortedCities';\r\nimport './FormMain.scss';\r\n\r\nconst FormMain = () => {\r\n  const [status, setStatus] = useState('');\r\n  const [value, setValue] = useState('');\r\n  const [inputText, setInputText] = useState(false);\r\n  const [lastTimeUpdate, setLastTimeUpdate] = useState('');\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    watch,\r\n  } = useForm();\r\n\r\n  const password = useRef({});\r\n  password.current = watch('password', '');\r\n\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleChangeStatus = e => {\r\n    e.preventDefault();\r\n    setStatus(value);\r\n    setValue(value);\r\n  };\r\n\r\n  const onSubmit = data => {\r\n    console.table(data);\r\n    setLastTimeUpdate(DateOfLastUpdate());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <h1 className=\"header__title\">\r\n          <span>Здравствуйте,</span> Человек №3596941\r\n        </h1>\r\n\r\n        <a\r\n          href=\"/#\"\r\n          className=\"ref__button\"\r\n          onClick={() => setInputText(!inputText)}\r\n        >\r\n          Сменить статус\r\n        </a>\r\n      </div>\r\n\r\n      {inputText ? (\r\n        <form onSubmit={handleChangeStatus} className=\"form__status\">\r\n          <input\r\n            className=\"form__status-input\"\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={handleChange}\r\n          />\r\n          <button className=\"form__status-button\" type=\"submit\">\r\n            +\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <p className=\"header__status\">{status}</p>\r\n      )}\r\n\r\n      <div>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div className=\"select__title\">\r\n            Ваш город\r\n            <select\r\n              className=\"select__list\"\r\n              name=\"city\"\r\n              {...register('city', { required: true })}\r\n            >\r\n              {byAlphabet.map(({ city }, i) => (\r\n                <option value={city} key={i}>\r\n                  {city}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"form__password\">\r\n            <label className=\"form__label\">\r\n              <span className=\"input__password\">Пароль</span>\r\n              <input\r\n                style={{ border: errors.password ? '1px solid #FF0000' : '' }}\r\n                className=\"input__field\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                {...register('password', {\r\n                  required: 'Укажите пароль',\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: 'Используйте не менее 5 символов',\r\n                  },\r\n                  maxLength: {\r\n                    value: 15,\r\n                    message: 'Используйте не более  15 символов',\r\n                  },\r\n                })}\r\n              />\r\n              <span className=\"input__info\">\r\n                Ваш новый пароль должен содержать не менее 5 символов.\r\n              </span>\r\n              {errors.password ? (\r\n                <p className=\"form__error\">{errors.password.message}</p>\r\n              ) : (\r\n                <p className=\"form__no-error\">Нету ошибок - заглушка</p>\r\n              )}\r\n            </label>\r\n          </div>\r\n          <div className=\"form__passwordRepeat\">\r\n            <label className=\"form__label\">\r\n              <span className=\"input__password\">Пароль еще раз</span>\r\n              <input\r\n                style={{\r\n                  border: errors.passwordRepeat ? '1px solid #FF0000' : '',\r\n                }}\r\n                className=\"input__field-repeat\"\r\n                type=\"password\"\r\n                name=\"passwordRepeat\"\r\n                {...register('passwordRepeat', {\r\n                  validate: value =>\r\n                    value === password.current || 'Пароли не совпадают',\r\n                  required: 'Укажите пароль',\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: 'Используйте не менее 5 символов',\r\n                  },\r\n                  maxLength: {\r\n                    value: 15,\r\n                    message: 'Используйте не более  15 символов',\r\n                  },\r\n                })}\r\n              />\r\n              <span className=\"input__info\">\r\n                Повторите пароль, пожалуйста, это обезопасит вас с нами на\r\n                случай ошибки.\r\n              </span>\r\n              {errors.passwordRepeat ? (\r\n                <p className=\"form__error\">{errors.passwordRepeat.message}</p>\r\n              ) : (\r\n                <p className=\"form__no-error\">Нету ошибок - заглушка</p>\r\n              )}\r\n            </label>\r\n          </div>\r\n          <div className=\"form__email\">\r\n            <label className=\"form__label\">\r\n              <span className=\"input__email\">Электронная почта</span>\r\n              <input\r\n                style={{ border: errors.email ? '1px solid #FF0000' : '' }}\r\n                className=\"input__field-email\"\r\n                name=\"email\"\r\n                {...register('email', {\r\n                  required: 'Укажите E-mail',\r\n                  pattern: {\r\n                    value: /\\S+@\\S+\\.\\S+/,\r\n                    message: 'Неверный E-mail',\r\n                  },\r\n                })}\r\n                type=\"email\"\r\n              />\r\n              <span className=\"input__info\">\r\n                Можно изменить адрес, указанный при регистрации.\r\n              </span>\r\n              {errors.email ? (\r\n                <p className=\"form__error\">{errors.email.message}</p>\r\n              ) : (\r\n                <p className=\"form__no-error\">Нету ошибок - заглушка</p>\r\n              )}\r\n            </label>\r\n          </div>\r\n          <div className=\"form__checkbox\">\r\n            <label className=\"form__label\">\r\n              <span className=\"input__checkbox\">Я согласен</span>\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"checkbox\"\r\n                className=\"input__field-checkbox\"\r\n              />\r\n              <span>принимать актуальную информацию на емейл</span>\r\n            </label>\r\n          </div>\r\n          <div className=\"form__agree\">\r\n            <button type=\"submit\" className=\"form__button\">\r\n              Изменить\r\n            </button>\r\n            <p className=\"form__date\">последние изменения {lastTimeUpdate}</p>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormMain;\r\n","export default function showLastDateUpdate() {\r\n  let currentDate = new Date();\r\n  const months = [\r\n    'января',\r\n    'февраля',\r\n    'марта',\r\n    'апреля',\r\n    'мая',\r\n    'июня',\r\n    'июля',\r\n    'августа',\r\n    'сентября',\r\n    'октября',\r\n    'ноября',\r\n    'декабря',\r\n  ];\r\n  const getCurrentDay = currentDate.getDate();\r\n  const getCurrentMonth = currentDate.getMonth();\r\n  const getCurrentYear = currentDate.getFullYear();\r\n  const getCurrentHours = currentDate.getHours();\r\n  const getCurrentMinutes = currentDate.getMinutes();\r\n  const getCurrentSeconds = currentDate.getSeconds();\r\n  return `${getCurrentDay} ${months[getCurrentMonth]} ${getCurrentYear} в ${getCurrentHours}:${getCurrentMinutes}:${getCurrentSeconds}`;\r\n}\r\n","import FormMain from './components/FormMain';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <FormMain />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}